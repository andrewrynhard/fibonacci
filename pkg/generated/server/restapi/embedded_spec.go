// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Fibonacci",
    "license": {
      "name": "MPL 2.0"
    },
    "version": "1.0.0"
  },
  "host": "fibonacci.local",
  "basePath": "/v1",
  "paths": {
    "/healthz": {
      "get": {
        "tags": [
          "healthz"
        ],
        "summary": "Returns the health of the application",
        "operationId": "getHealthz",
        "responses": {
          "200": {
            "description": "The response indicating that the application is healthy."
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sequence/{n}": {
      "get": {
        "tags": [
          "sequence"
        ],
        "summary": "Returns the first n Fibonacci numbers",
        "operationId": "getSequence",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Specifies which number the sequence should stop at (inclusively)",
            "name": "n",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "schema": {
              "$ref": "#/definitions/Sequence"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Sequence": {
      "required": [
        "n"
      ],
      "properties": {
        "n": {
          "type": "string"
        }
      }
    },
    "SequenceRequest": {
      "required": [
        "n"
      ],
      "properties": {
        "n": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Fibonacci",
    "license": {
      "name": "MPL 2.0"
    },
    "version": "1.0.0"
  },
  "host": "fibonacci.local",
  "basePath": "/v1",
  "paths": {
    "/healthz": {
      "get": {
        "tags": [
          "healthz"
        ],
        "summary": "Returns the health of the application",
        "operationId": "getHealthz",
        "responses": {
          "200": {
            "description": "The response indicating that the application is healthy."
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sequence/{n}": {
      "get": {
        "tags": [
          "sequence"
        ],
        "summary": "Returns the first n Fibonacci numbers",
        "operationId": "getSequence",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Specifies which number the sequence should stop at (inclusively)",
            "name": "n",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "schema": {
              "$ref": "#/definitions/Sequence"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Sequence": {
      "required": [
        "n"
      ],
      "properties": {
        "n": {
          "type": "string"
        }
      }
    },
    "SequenceRequest": {
      "required": [
        "n"
      ],
      "properties": {
        "n": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}`))
}
