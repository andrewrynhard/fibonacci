// Code generated by go-swagger; DO NOT EDIT.

package sequence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/andrewrynhard/fibonacci/pkg/generated/api/models"
)

// GetSequenceReader is a Reader for the GetSequence structure.
type GetSequenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSequenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSequenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetSequenceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSequenceOK creates a GetSequenceOK with default headers values
func NewGetSequenceOK() *GetSequenceOK {
	return &GetSequenceOK{}
}

/*GetSequenceOK handles this case with default header values.

Expected response to a valid request
*/
type GetSequenceOK struct {
	Payload *models.Sequence
}

func (o *GetSequenceOK) Error() string {
	return fmt.Sprintf("[GET /sequence/{n}][%d] getSequenceOK  %+v", 200, o.Payload)
}

func (o *GetSequenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Sequence)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSequenceDefault creates a GetSequenceDefault with default headers values
func NewGetSequenceDefault(code int) *GetSequenceDefault {
	return &GetSequenceDefault{
		_statusCode: code,
	}
}

/*GetSequenceDefault handles this case with default header values.

unexpected error
*/
type GetSequenceDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get sequence default response
func (o *GetSequenceDefault) Code() int {
	return o._statusCode
}

func (o *GetSequenceDefault) Error() string {
	return fmt.Sprintf("[GET /sequence/{n}][%d] getSequence default  %+v", o._statusCode, o.Payload)
}

func (o *GetSequenceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
